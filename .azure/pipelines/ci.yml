#
# See https://docs.microsoft.com/en-us/vsts/pipelines/yaml-schema for details on this file.
#

# Configure which branches trigger builds
trigger:
  batch: true
  branches:
    include:
    - main
    - release/*
    - internal/release/*

# Run PR validation on all branches
pr:
  autoCancel: true
  branches:
    include:
    - '*'

variables:
- name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
  value: true
- name: _TeamName
  value:  AspNetCore
- name: _DotNetPublishToBlobFeed
  value: true
- name: _PublishUsingPipelines
  value: true
- name: _DotNetArtifactsCategory
  value: .NETCORE
- name: _DotNetValidationArtifactsCategory
  value: .NETCORE
- name: PostBuildSign
  value: true
- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - name: _BuildArgs
    value: /p:TeamName=$(_TeamName)
           /p:OfficialBuildId=$(Build.BuildNumber)
           /p:SkipTestBuild=true
           /p:PostBuildSign=$(PostBuildSign)
  # DotNet-Blob-Feed provides: dotnetfeed-storage-access-key-1
  # Publish-Build-Assets provides: MaestroAccessToken, BotAccount-dotnet-maestro-bot-PAT
  - group: DotNet-Blob-Feed
  - group: Publish-Build-Assets
  # The following extra properties are not set when testing. Use with final build.[cmd,sh] of asset-producing jobs.
  - name: _PublishArgs
    value: /p:Publish=true
           /p:GenerateChecksums=true
           /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
           /p:DotNetPublishBlobFeedUrl=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
           /p:DotNetPublishToBlobFeed=$(_DotNetPublishToBlobFeed)
           /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)
           /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory)
  # Do not log most Windows steps in official builds; this is the slowest job. Site extensions step always logs.
  - name: WindowsArm64LogArgs
    value: -ExcludeCIBinaryLog
  - name: Windows64LogArgs
    value: -ExcludeCIBinaryLog
  - name: Windows86LogArgs
    value: -ExcludeCIBinaryLog
  - name: WindowsSignLogArgs
    value: -ExcludeCIBinaryLog
  - name: WindowsInstallersLogArgs
    value: -ExcludeCIBinaryLog
  - name: WindowsArm64InstallersLogArgs
    value: -ExcludeCIBinaryLog
- ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
  - name: _BuildArgs
    value: '/p:PostBuildSign=$(PostBuildSign)'
  - name: _PublishArgs
    value: ''
  # Write binary logs for all main Windows build steps except the x86 one in public and PR builds.
  - name: WindowsArm64LogArgs
    value: /bl:artifacts/log/Release/Build.arm64.binlog
  - name: Windows64LogArgs
    value: /bl:artifacts/log/Release/Build.x64.binlog
  - name: Windows86LogArgs
    value: -ExcludeCIBinaryLog
  - name: WindowsSignLogArgs
    value: /bl:artifacts/log/Release/Build.CodeSign.binlog
  - name: WindowsInstallersLogArgs
    value: /bl:artifacts/log/Release/Build.Installers.binlog
  - name: WindowsArm64InstallersLogArgs
    value: /bl:artifacts/log/Release/Build.Installers.Arm64.binlog
- ${{ if ne(variables['System.TeamProject'], 'internal') }}:
  - name: _UseHelixOpenQueues
    value: 'true'
  - name: _SignType
    value: ''
  - name: _InternalRuntimeDownloadArgs
    value: ''
  - name: _InternalRuntimeDownloadCodeSignArgs
    value: ''
- ${{ if eq(variables['System.TeamProject'], 'internal') }}:
  - group: DotNet-MSRC-Storage
  - name: _InternalRuntimeDownloadArgs
    value: -RuntimeSourceFeed https://dotnetclimsrc.blob.core.windows.net/dotnet
           -RuntimeSourceFeedKey $(dotnetclimsrc-read-sas-token-base64)
           /p:DotNetAssetRootAccessTokenSuffix='$(dotnetclimsrc-read-sas-token-base64)'
  # The code signing doesn't use the aspnet build scripts, so the msbuild parameters have to be passed directly. This
  # is awkward but necessary because the eng/common/ build scripts don't add the msbuild properties automatically.
  - name: _InternalRuntimeDownloadCodeSignArgs
    value: $(_InternalRuntimeDownloadArgs)
           /p:DotNetRuntimeSourceFeed=https://dotnetclimsrc.blob.core.windows.net/dotnet
           /p:DotNetRuntimeSourceFeedKey=$(dotnetclimsrc-read-sas-token-base64)
  - group: DotNet-HelixApi-Access
  - name: _UseHelixOpenQueues
    value: 'false'
  - ${{ if notin(variables['Build.Reason'], 'PullRequest') }}:
    - name: _SignType
      value: real
  - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
    - name: _SignType
      value: test

stages:
- stage: build
  displayName: Build
  jobs:
  # Build Windows (x64/x86)
  - template: jobs/default-build.yml
    parameters:
      codeSign: true
      jobName: Windows_build
      jobDisplayName: "Build: Windows x64/x86"
      agentOs: Windows
      steps:
      - script: "echo ##vso[build.addbuildtag]daily-build"
        condition: and(notin(variables['Build.Reason'], 'PullRequest'), notin(variables['DotNetFinalVersionKind'], 'release', 'prerelease'))
        displayName: 'Set CI tags'
      - script: "echo ##vso[build.addbuildtag]release-candidate"
        condition: and(notin(variables['Build.Reason'], 'PullRequest'), in(variables['DotNetFinalVersionKind'], 'release', 'prerelease'))
        displayName: 'Set CI tags'

      # !!! NOTE !!! Some of these steps have disabled code signing.
      # This is intentional to workaround https://github.com/dotnet/arcade/issues/1957 which always re-submits for code-signing, even
      # if they have already been signed. This results in slower builds due to re-submitting the same .nupkg many times for signing.
      # The sign settings have been configured to
      - script: ./build.cmd
                -ci
                -arch x64
                -pack
                -all
                '/fileLoggerParameters:LogFile=artifacts/log/performance.x64.log;PerformanceSummary;Verbosity=Quiet'
                $(_BuildArgs)
                $(_InternalRuntimeDownloadArgs)
        displayName: Build x64

      # Build the x86 shared framework
      # This is going to actually build x86 native assets.
      - script: ./build.cmd
                -ci
                -noBuildRepoTasks
                -arch x86
                -pack
                -all
                -noBuildJava
                -noBuildNative
                /p:OnlyPackPlatformSpecificPackages=true
                '/fileLoggerParameters:LogFile=artifacts/log/performance.x86.log;PerformanceSummary;Verbosity=Quiet'
                $(_BuildArgs)
                $(_InternalRuntimeDownloadArgs)
        displayName: Build x86

      artifacts:
      - name: Windows_Logs
        path: artifacts/log/
        publishOnError: true
        includeForks: true
      - name: Windows_Packages
        path: artifacts/packages/

  # Build Linux x64
  - template: jobs/default-build.yml
    parameters:
      jobName: Linux_x64_build
      jobDisplayName: "Build: Linux x64"
      agentOs: Linux
      useHostedUbuntu: false
      steps:
      - script: ./build.sh
            --ci
            --arch x64
            --pack
            --all
            --no-build-nodejs
            --no-build-java
            -p:OnlyPackPlatformSpecificPackages=true
            -p:AssetManifestFileName=aspnetcore-Linux_x64.xml
            $(_BuildArgs)
            $(_InternalRuntimeDownloadArgs)
            '/fileLoggerParameters:LogFile=artifacts/log/performance.x64.log;PerformanceSummary;Verbosity=Quiet'
        displayName: Run build.sh
      installNodeJs: false
      installJdk: false
      artifacts:
      - name: Linux_x64_Logs
        path: artifacts/log/
        publishOnError: true
        includeForks: true
      - name: Linux_x64_Packages
        path: artifacts/packages/

  - ${{ if ne(variables['PostBuildSign'], 'true') }}:
    - template: jobs/codesign-xplat.yml
      parameters:
        inputName: Linux_x64
  # Publish to the BAR
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - template: /eng/common/templates/job/publish-build-assets.yml
      parameters:
        dependsOn:
          - Windows_build
          - Windows_arm_build
          - Windows_arm64_build
          - ${{ if ne(variables['PostBuildSign'], 'true') }}:
            - CodeSign_Xplat_MacOS_arm64
            - CodeSign_Xplat_MacOS_x64
            - CodeSign_Xplat_Linux_x64
            - CodeSign_Xplat_Linux_arm
            - CodeSign_Xplat_Linux_arm64
            - CodeSign_Xplat_Linux_musl_x64
            - CodeSign_Xplat_Linux_musl_arm
            - CodeSign_Xplat_Linux_musl_arm64
          # In addition to the dependencies above, ensure the build was successful overall.
          - Source_Build
        pool:
          vmImage: vs2017-win2016
        publishUsingPipelines: ${{ variables._PublishUsingPipelines }}
        enablePublishBuildArtifacts: true # publish artifacts/log files

- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - template: /eng/common/templates/post-build/post-build.yml
    parameters:
      publishingInfraVersion: 3
      enableSymbolValidation: false
      enableSigningValidation: false
      enableNugetValidation: false
      publishInstallersAndChecksums: true
